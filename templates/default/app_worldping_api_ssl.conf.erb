upstream worldping {
  server <%= node['chef_worldping_api']['backend'] %>;
}

upstream task_server {
  server <%= node['chef_task_server']['backend'] %>;
}

server {
  listen 80;
  server_name health.<%= node['chef_worldping_api']['domain'] %>;
  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://worldping;
  }
}

server {
  listen 80;
  server_name health.<%= node['chef_task_server']['domain'] %>;
  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://task_server;
  }
}

<% if node["use_collectd"] %>
server {
  listen 127.0.0.1:8899;
  server_name _;
  location / {
    root   /var/www/nginx-default;
    index  index.html index.htm;
  }
  location /nginx_status {
    stub_status on;
    access_log  off;
    allow       127.0.0.1;
    deny        all;
  }
}
<% end %>

# TODO: allow for listening on HTTPS, upgrading the connection for non-SSL.
server {
  listen 443 default ssl; # for Linux
  server_name <%= node['chef_worldping_api']['domain'] %>;

  ssl_certificate <%= node['chef_worldping_api']['nginx']['ssl_cert_file'] %>;
  ssl_certificate_key <%= node['chef_worldping_api']['nginx']['ssl_key_file'] %>;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
  ssl_prefer_server_ciphers on;

  # allow only valid crud methods
  if ($request_method !~ GET|POST|PUT|DELETE|PATCH) {
    return 405;
  }

  # ignore obviously false requests
  if ($request_filename ~ \.(php.?|[ajk]sp[ax]?|x|idc|log|cf[mc]?|mdb|do|(ms|f)?cgi|p(er)?lx?|nsf|dll|fts|exe|bat|dot|ini|com|pif|sh|sql|git|svn|yml)$) {
    return 404;
  }

  ## Block http user agent - wget ##
  if ($http_user_agent ~* (SecopsSecurityScan) ) {
     return 403;
  }

  # opt-in to the future
  add_header "X-UA-Compatible" "IE=Edge,chrome=1";

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://worldping;
  }

  location /nginx_status {
    stub_status on;
    access_log  off;
    allow       127.0.0.1;
    deny        all;
  }
  location /debug {
    stub_status on;
    access_log  off;
    allow       127.0.0.1;
    deny        all;
  }
}

server {
  listen 443; # for Linux
  server_name <%= node['chef_task_server']['domain'] %>;

  ssl_certificate <%= node['chef_worldping_api']['nginx']['ssl_cert_file'] %>;
  ssl_certificate_key <%= node['chef_worldping_api']['nginx']['ssl_key_file'] %>;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
  ssl_prefer_server_ciphers on;

  # allow only valid crud methods
  if ($request_method !~ GET|POST|PUT|DELETE|PATCH) {
    return 405;
  }

  # ignore obviously false requests
  if ($request_filename ~ \.(php.?|[ajk]sp[ax]?|x|idc|log|cf[mc]?|mdb|do|(ms|f)?cgi|p(er)?lx?|nsf|dll|fts|exe|bat|dot|ini|com|pif|sh|sql|git|svn|yml)$) {
    return 404;
  }

  ## Block http user agent - wget ##
  if ($http_user_agent ~* (SecopsSecurityScan) ) {
     return 403;
  }

  # opt-in to the future
  add_header "X-UA-Compatible" "IE=Edge,chrome=1";


  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://task_server;
  }
}

