##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

app_mode = <%= node[:chef_worldping_api]['app_mode'] %>

# all grafana instances in your environment should have a unique instance_id
instance_id = <%= node[:chef_worldping_api]['instance_id'] %>

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is useD)
#
data = <%= node[:chef_worldping_api]['data_dir'] %>
#
# Directory where grafana can store logs
#
logs = <%= node[:chef_worldping_api]['log_dir'] %>

#################################### Server ####################################
[server]
# Protocol (http or https)
protocol = <%= node[:chef_worldping_api]['protocol'] %>

# The ip address to bind to, empty will bind to all interfaces
<% if node[:chef_worldping_api]['http_addr'] %>
http_addr = <%= node[:chef_worldping_api]['http_addr'] %>
<% end %>

# The http port  to use
http_port = <%= node[:chef_worldping_api]['port'] %>

# The public facing domain name used to access grafana from a browser
domain = <%= node[:chef_worldping_api]['domain'] %>

# The full public facing url
;root_url = %(protocol)s://%(domain)s:%(http_port)s/
root_url = <%= node[:chef_worldping_api]['root_url'] %>

# Log web requests
router_logging = <%= node[:chef_worldping_api]['router_logging'] %>

# the path relative working path
static_root_path = <%= node[:chef_worldping_api]['static_root'] %>

# enable gzip
enable_gzip = <%= node[:chef_worldping_api]['enable_gzip'] %>

admin_key = <%= node[:chef_worldping_api]['admin_key'] %>

#################################### Database ####################################
[database]
# Either "mysql", "postgres" or "sqlite3", it's your choice
type = <%= node[:chef_worldping_api]['db_type'] %>
host = <%= @db_host %>:<%= node[:chef_worldping_api]['db_port'] %>
name = <%= node[:chef_worldping_api]['db_name'] %>
user = <%= node[:chef_worldping_api]['db_user'] %>
password = <%= node[:chef_worldping_api]['db_password'] %>

# For "postgres" only, either "disable", "require" or "verify-full"
<% if node[:chef_worldping_api]['db_type'] == "postgres" %>
ssl_mode = <%= node[:chef_worldping_api]['db_ssl_mode'] %>
<% end %>

# For "sqlite3" only, path relative to data_path setting
# ;path = grafana.db


#################################### SMTP / Emailing ##########################
[smtp]
enabled = <%= node[:chef_worldping_api]['smtp']['enabled'] %>
host = <%= node[:chef_worldping_api]['smtp']['host'] %>
user = <%= node[:chef_worldping_api]['smtp']['user'] %>
password = <%= node[:chef_worldping_api]['smtp']['password'] %>
cert_file = <%= node[:chef_worldping_api]['smtp']['cert_file'] %>
key_file = <%= node[:chef_worldping_api]['smtp']['key_file'] %>
from_address = <%= node[:chef_worldping_api]['smtp']['from_address'] %>

[emails]
welcome_email_on_sign_up = <%= node[:chef_worldping_api]['email']['welcome_email'] %>
templates_pattern = <%= node[:chef_worldping_api]['email']['templates_pattern'] %>

#################################### Alerting ##########################
[alerting]
enabled = <%= node[:chef_worldping_api]['alerting']['enabled'] %>
tickqueue_size = <%= node[:chef_worldping_api]['alerting']['queue_ticks_size'] %>
internal_jobqueue_size = <%= node[:chef_worldping_api]['alerting']['queue_jobs_size'] %>
pre_amqp_jobqueue_size = <%= node[:chef_worldping_api]['alerting']['pre_amqp_jobs_size'] %>
executor_lru_size = <%= node[:chef_worldping_api]['alerting']['executor_lru_size'] %>
enable_scheduler = <%= node[:chef_worldping_api]['alerting']['enable_scheduler'] %>
write_individual_alert_results = <%= node[:chef_worldping_api]['alerting']['individual_alerts'] %>
graphite_url = http://<%= @graphite_host %>:<%= node[:chef_worldping_api][:alerting]['graphite_port'] %>/

#################################### Logging ##########################
[log]
# Either "console", "file", default is "console"
# Use comma to separate multiple modes, e.g. "console, file"
mode = <%= node[:chef_worldping_api]['log_mode'] %>

# Buffer length of channel, keep it as it is if you don't know what it is.
;buffer_len = 10000

# Either "Trace", "Debug", "Info", "Warn", "Error", "Critical", default is "Trace"
level = <%= node[:chef_worldping_api]['log_level'] %>

# For "console" mode only
[log.console]
level = <%= node[:chef_worldping_api]['log_level_console'] %>

# For "file" mode only
[log.file]
level = <%= node[:chef_worldping_api]['log_level_file'] %>

<% if node[:chef_worldping_api]['no_log_rotate'] %>
# This enables automated log rotate(switch of following options), default is true
log_rotate = false
<% end %>

# Max line number of single file, default is 1000000
;max_lines = 1000000

# Max size shift of single file, default is 28 means 1 << 28, 256MB
;max_lines_shift = 28

# Segment log daily, default is true
;daily_rotate = true

# Expired days of log file(delete after max days), default is 7
;max_days = 7

#################################### AMPQ Event Publisher ##########################
[rabbitmq]
enabled = <%= node[:chef_worldping_api]['event_publish'] %>
url = amqp://<%= @rabbitmq_host %>/
events_exchange = <%= node[:chef_worldping_api]['event_exchange'] %>
alerts_exchange = <%= node[:chef_worldping_api]['alerts_exchange'] %>

[raintank]
graphite_url = http://<%= @graphite_host %>:<%= node[:chef_worldping_api]['graphite_port'] %>/
elasticsearch_url = http://<%= @elasticsearch_host %>:9200/

##################### telemetry
[telemetry]
statsd_enabled = <%= node[:chef_worldping_api]['use_statsd'] %>
statsd_addr = <%= node[:chef_worldping_api]['statsd_addr'] %>
<% if node[:chef_worldping_api]['statsd_type'] %>
statsd_type = <%= node[:chef_worldping_api]['statsd_type'] %>
<% end %>

############## profiling
<% if node[:chef_worldping_api]['use_profiling'] %>
# profiling
profile_heap_MB = <%= node[:chef_worldping_api]['profile_heap_mb'] %>
profile_heap_dir = <%= node[:chef_worldping_api]['profile_heap_dir'] %>
profile_heap_wait = <%= node[:chef_worldping_api]['profile_heap_wait'] %>
<% end %>


################ QUOTA
[quota]
enabled = <%= node[:chef_worldping_api]['quota']['enabled'] %>

#### set quotas to -1 to make unlimited. ####

# limit number of endpoints per Org.
org_endpoint = <%= node[:chef_worldping_api]['quota']['org_endpoint'] %>

# limit number of collectors per Org.
org_probe = <%= node[:chef_worldping_api]['quota']['org_probe'] %>

# golbal limit of endpoints
global_endpoint =  <%= node[:chef_worldping_api]['quota']['global_endpoint'] %>

# golbal limit of collectors
global_probe =  <%= node[:chef_worldping_api]['quota']['global_probe'] %>


[metric_publisher]
enabled = true
broker = <%= @kafka_host %>:9092
topic = mdm
compression = none

[event_publisher]
enabled = true
broker = <%= @kafka_host %>:9092
topic = events
compression = none
